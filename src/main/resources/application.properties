#spring.application.name=STUDENT-SERVICE
server.port=8090
#eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/

spring.datasource.url= jdbc:mysql://localhost:3306/student1
spring.datasource.username= root
spring.datasource.password= root
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto = update
spring.jpa.show-sql=true

#for jwt token but this server will not interact with keycloak only check token  after logout autentication valid which is wrong
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/myrealm

#for opaqueToken through it springboot interact with keycloack not only token
spring.security.oauth2.resourceserver.opaqueToken.client-id=springboot
spring.security.oauth2.resourceserver.opaqueToken.client-secret=NOA3WM9EIni547XkaWxpXd1QYAOF02DT
spring.security.oauth2.resourceserver.opaqueToken.introspection-uri=http://localhost:8080/realms/myrealm/protocol/openid-connect/token/introspect

#for swagger
#springdoc.swagger-ui.oauth.client-id=springboot
#springdoc.swagger-ui.oauth.client-secret=NOA3WM9EIni547XkaWxpXd1QYAOF02DT

springdoc.swagger-ui.oauth.client-id=springboot
springdoc.swagger-ui.oauth.client-secret=d8kID46LUVsIrxMvxwkAUZu3t3bZ3lyH

#to call api of Keycloak from here
#realm=myrealm
#server-url=http://localhost:8080
#client-id=admin-cli
#grant-type=password
#name=niraj
#password=123

realm=master
server-url=http://localhost:8080
client-id=admin-cli
grant-type=password
name=admin
password=admin

#This will prevent Jackson from throwing an exception when it encounters a class with no properties to serialize
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
